Unique (cost=1089.36..1089.40 rows=5 width=44) (actual time=54.464..55.827 rows=600 loops=1)
 -> Sort (cost=1089.36..1089.38 rows=5 width=44) (actual time=54.463..54.905 rows=8632 loops=1)
  Sort Key: (count(r.inventory_id) OVER (?)) DESC, ((((cu.first_name)::text || ' '::text) || (cu.last_name)::text))
  Sort Method: quicksort Memory: 1058kB сортировка итоговых результатов
  -> WindowAgg (cost=1089.19..1089.30 rows=5 width=44) (actual time=37.623..48.269 rows=8632 loops=1) Работает аггрегирующая функция count, подсчитывает число фильмов для каждого пользователя
    -> Sort (cost=1089.19..1089.20 rows=5 width=21) (actual time=37.594..39.242 rows=8632 loops=1)
     Sort Key: cu.customer_id
     Sort Method: quicksort Memory: 1057kB Сортировка результатов по пользователю после использования group by
     -> Nested Loop Left Join (cost=81.09..1089.13 rows=5 width=21) (actual time=0.440..34.541 rows=8632 loops=1) Джойн по индексу пользователей и результатов предидующих джойнов
       -> Nested Loop Left Join (cost=80.82..1087.66 rows=5 width=6) (actual time=0.435..21.600 rows=8632 loops=1) Происходит джойн таблицы инвентори, и виртуальной таблицы, полученной после джойна фильма и инвентори
        -> Subquery Scan on inv (cost=76.50..995.42 rows=5 width=4) (actual time=0.425..7.244 rows=2494 loops=1)
          Filter: (inv.sf_string ~~ '%Behind the Scenes%'::text)
          Rows Removed by Filter: 7274 Фильтруются результаты на содержание метки Behind the Scenes
          -> ProjectSet (cost=76.50..422.80 rows=45810 width=710) (actual time=0.423..5.834 rows=9768 loops=1) Результаты джойна возвращаются как таблица
           -> Hash Full Join (cost=76.50..159.39 rows=4581 width=63) (actual time=0.420..2.251 rows=4623 loops=1)
             Hash Cond: (i.film_id = f.film_id) Происходит джойн результатов сканирования таблицы inventory и хэш таблицы с результатами сканирования film
             -> Seq Scan on inventory i (cost=0.00..70.81 rows=4581 width=6) (actual time=0.004..0.462 rows=4581 loops=1) Последовательное сканирование таблицы inventory
             -> Hash (cost=64.00..64.00 rows=1000 width=63) (actual time=0.411..0.412 rows=1000 loops=1)
              Buckets: 1024 Batches: 1 Memory Usage: 104kB Результаты сканирования таблицы film записаны в хэш-таблицу
              -> Seq Scan on film f (cost=0.00..64.00 rows=1000 width=63) (actual time=0.006..0.260 rows=1000 loops=1)  Последовательное сканирование таблицы film
        -> Bitmap Heap Scan on rental r (cost=4.32..18.41 rows=4 width=6) (actual time=0.003..0.005 rows=3 loops=2494)
          Recheck Cond: (inventory_id = inv.inventory_id)
          Heap Blocks: exact=8602 На основании построенной битовой карты происходит чтение таблицы rental
          -> Bitmap Index Scan on idx_fk_inventory_id (cost=0.00..4.32 rows=4 width=0) (actual time=0.002..0.002 rows=3 loops=2494)
           Index Cond: (inventory_id = inv.inventory_id) Сканирование индекса таблицы rental, привязанного к колонке inventory_id, создание битовой карты
       -> Index Scan using customer_pkey on customer cu (cost=0.28..0.30 rows=1 width=17) (actual time=0.001..0.001 rows=1 loops=8632) Сканирование индекса таблицы customer
        Index Cond: (customer_id = r.customer_id)
Planning Time: 0.387 ms
Execution Time: 55.994 ms


Первая - фулл джойн таблиц inventory и film
Вторая ошибка - проверка на условие после джойна, используя WHERE, вместо получения всех записей film, удовлетворяющих условию, до всех джойнов, подзапросом, или непосредственно в начале джойна, используя ON

